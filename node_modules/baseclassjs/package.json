{
  "name": "baseclassjs",
  "version": "1.1.2",
  "description": "Lean yet robust JavaScript inheritance.",
  "main": "dist/node/baseclass.min.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cobbdb/baseclass.git"
  },
  "keywords": [
    "inheritance",
    "parasitic",
    "crockford",
    "simple",
    "easy",
    "fast",
    "minimal",
    "super",
    "class"
  ],
  "author": {
    "name": "Dan Cobb",
    "email": "cobbdb@gmail.com",
    "url": "http://www.github.com/cobbdb"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cobbdb/baseclass/issues"
  },
  "homepage": "https://github.com/cobbdb/baseclass",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jasmine": "^0.8.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.6.0",
    "matchdep": "^0.3.0"
  },
  "readme": "# BaseClass [![Bower version](https://badge.fury.io/bo/baseclass.svg)](http://badge.fury.io/bo/baseclass) [![NPM version](https://badge.fury.io/js/baseclassjs.svg)](http://badge.fury.io/js/baseclassjs)\n\nLean yet robust JavaScript inheritance.\n\n    $ bower install baseclass\n    $ npm install baseclassjs\n\n-------------\nBaseClass is an alternative to many of the overbearing and intrusive inheritance libraries\nsuch as Ember and even Fiber. Code in natural JavaScript but now with the power of simple\ninheritance.\n\n## BaseClass & extend()\nHere's a quick example showing a typical class setup.\n\n    // class-definition.js\n    var Pet = function (name) {\n        return {\n            name: name,\n            speak: function () {\n                console.log('Hi there!');\n            },\n            // Just add this one method to your base class and\n            // you're all set up! Simple as can be!\n            extend: BaseClass\n        };\n    };\n    var Dog = function (name) {\n        return Pet(name).extend({\n            color: 'grey',\n            speak: function () {\n                this.base.speak();\n                console.log(\"I'm \" + name + \" and I'm a \"  + this.color + ' dog.');\n            }\n        });\n    };\n\n    // my-app.js\n    var woofie = Dog('Woofie');\n    woofie.speak(); // --> Hi there! I'm Woofie and I'm a grey dog.\n\nThis inheritance chain can continue on as deep as you want it to be. To reach deeper into the\nchain, just use the `.base` notation. For example if you want data from two levels deep, that\nwould look like `child.base.base.data`.\n\nSince all properties are brought over to each child, your will always have access to an `extend`\nmethod to create more children.\n\n## BaseClass.Abstract\nIf you want your base class to enforce an override, you can use the `Abstract` method provided\nfrom the BaseClass function. Simply drop it into place like this:\n\n    // definition.js\n    var Vehicle = function (model) {\n        return {\n            extend: BaseClass,\n            model: model,\n            // Drop it in like any other property.\n            drive: BaseClass.Abstract\n        };\n    };\n    var Car = function (model) {\n        return Vehicle(model).extend({\n            color: 'blue'\n            // Notice we did -not- override the drive() method.\n        });\n    };\n\n    // my-app.js\n    var whip = Car('Honda');\n    whip.drive(); // --> Throws JS Error!\n\nCalling an abstract method that has not been overridden will result in a JS Error being thrown.\n\n## BaseClass.Stub\nSometimes you only want to reserve an attribute name to ensure that it's provided to all children.\nThis can be done easily with the `Stub` method.\n\n    // definition.js\n    var Vehicle = function (model) {\n        return {\n            extend: BaseClass,\n            model: model,\n            // Drop it in like any other property.\n            honk: BaseClass.Stub\n        };\n    };\n    var Car = function (model) {\n        return Vehicle(model).extend({\n            weight: '1000lbs'\n            // Notice we did -not- override the honk() method.\n        });\n    };\n\n    // my-app.js\n    var whip = Car('Honda');\n    whip.honk(); // --> Nothing happens.\n\n---------\n* See: http://cobbdb.github.io/baseclass/\n* See: http://github.com/cobbdb/baseclass\n* License: MIT\n",
  "readmeFilename": "readme.md",
  "gitHead": "547c759498a6afa02b25cbe1c283fdfbd2d216ac",
  "_id": "baseclassjs@1.1.2",
  "_shasum": "638acfddf209b327d3ec1c48e2cc1c937393c657",
  "_from": "baseclassjs@"
}
